library(readr)
voteData = read_csv("comp_ia_bootstrap2_RCT.csv")

#We yield a table that has a lot of NA values, we are concerned mostly with the NA values in treat_real, the experimental variable
#We remove any entries in the data where treat_real contains an NA and recreate the matrix
voteData = voteData[!is.na(voteData$treat_real), ]

#To test "randomization" for both populations, we split them into two groups depending on treat_real = 1 vs treat_real = 0
treatVsControl = split(voteData, voteData$treat_real)
treatPop = treatVsControl[["1"]]
controlPop = treatVsControl[["0"]]

comparativeStat = matrix(NA, nrow = 2, ncol = 9)
rownames(comparativeStat) = c("Treatment", "Control")

categories = c("vote00", "county", "st_sen", "st_hse", "vote98", "newreg", "pid_maj", "age", "female")
colnames(comparativeStat) = categories

#######################################################
  comparativeStat[1,1] = mean(treatPop$vote00)
  comparativeStat[1,2] = mean(treatPop$county)
  comparativeStat[1,3] = mean(treatPop$st_sen)
  comparativeStat[1,4] = mean(treatPop$st_hse)
  comparativeStat[1,5] = mean(treatPop$vote98)
  comparativeStat[1,6] = mean(treatPop$newreg)
  comparativeStat[1,7] = mean(treatPop$pid_maj)
  comparativeStat[1,8] = mean(treatPop$age)
  comparativeStat[1,9] = mean(treatPop$female2)
  
  
  comparativeStat[2,1] = mean(controlPop$vote00)
  comparativeStat[2,2] = mean(controlPop$county)
  comparativeStat[2,3] = mean(controlPop$st_sen)
  comparativeStat[2,4] = mean(controlPop$st_hse)
  comparativeStat[2,5] = mean(controlPop$vote98)
  comparativeStat[2,6] = mean(controlPop$newreg)
  comparativeStat[2,7] = mean(controlPop$pid_maj)
  comparativeStat[2,8] = mean(controlPop$age)
  comparativeStat[2,9] = mean(controlPop$female2)
#########################################################

comparativeStat
  
----------------------------------------------------------------------------------------------------------------------------------
    
mainReg = lm(voteData$vote02 ~ voteData$treat_real)
  summary(mainReg)


  
