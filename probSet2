---
title: "Assignment 2"
author: "Johar"
date: "2/7/2019"
output: pdf_document
---

Set up packages and call stock data for Medical Marijuana inc. Creating a vector for the adjusted close prices as the main data to be evaluated.
```{r}
install.packages('quantmod', repos = " https://CRAN.R-project.org/package=quantmod")

library('quantmod')
getSymbols('MJNA', from= '2016-02-02', to= '2017-02-01')
weed.close = MJNA[1:252,6]
maryClose = as.numeric(weed.close)

plot(maryClose, type = "l", col = rgb(0,0.25,0), main = "MJNA Pricing") 
```

Calling the 'moments' package, which aids in finding moments and includes functions for finding kurtosis and skewness. 

```{r}
install.packages('moments', repos = "https://cran.r-project.org/web/packages/moments/moments.pdf")
library('moments')

#Then computing sample skewness and kurtosis for the closing price vector of MJNA
skewness(maryClose)
  #gives 1.257056
kurtosis(maryClose)
  #gives 3.256812

#Normal Probability plot of MJNA
qqnorm(maryClose, col = rgb(0,0.25,0))
qqline(maryClose)
```


Because of the positive skewness, it indicates heavier tails to the right and a heavier concentration on the density towards the left (lower values) of the data. This normal probability plot does indicate this. The highest data points are more isolated and varied out, while the lowest data points are heavily concentrated. Additionally, a kurtosis of 3.25 is just a bit higher than the normal (3). Kurtosis indicates how scattered the variance is. Looking at the qqplot, the variance doesn't seem too much more scattered than a normal would, and that 0.25 deviation probably comes from that heavy right tail and heavy left concentration.

Q2
```{r}

#Simulate N=100 observations from a distribution that is 87% N(0,1), 10% N(0,7.2), and 3% N(0,11)
n = 100
mu = 0
dists = sample(1:3, prob = c(0.87,0.1,0.3), size = n, replace =TRUE)
sds = c(1,7.2,11)

samples = rnorm(n, mu, sds[dists])

library('moments')
kurtosis(samples)
#returned 12.81025 in a test

  n2 = 1000
  samples2 = rnorm(n2, mu, sds[dists])
  print(kurtosis(samples2))            # = 10.65312

  n3  = 10000
  samples3 = rnorm(n3, mu, sds[dists])
  print(kurtosis(samples3))            # = 10.3789

  n4 = 100000
  samples4 = rnorm(n4, mu, sds[dists])
  print(kurtosis(samples4))            # = 10.50658
```

``` {r}
# True kurtosis of "samples1"
m4 = all.moments(samples,4)[4]  
sdsam = sd(samples)

kurtTrue = m4/(sdsam^4)

# returns -0.6809802, pretty sure I did something wrong here
```

